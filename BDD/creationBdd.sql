/* LINKS CREATION */
CREATE DATABASE LINK EuN
CONNECT TO ovicente IDENTIFIED BY mdporacle
USING 'DB2';

CREATE DATABASE LINK Am
CONNECT TO ovicente IDENTIFIED BY mdporacle
USING 'DB4';

CREATE DATABASE LINK R
CONNECT TO ovicente IDENTIFIED BY mdporacle
USING 'DB1';

/* ALIAS CREATION */
/* CLIENTS */
CREATE OR REPLACE VIEW VIEW_GLOBAL_CLIENTS_A
AS
(
  (SELECT * FROM OSTEIN.Clients_A@Am)
);
CREATE SYNONYM CLIENTS_A FOR VIEW_GLOBAL_CLIENTS_A;

CREATE OR REPLACE VIEW VIEW_GLOBAL_CLIENTS_EUN
AS
(
  (SELECT * FROM AFAVIER.Clients_EUN@EuN)
);
CREATE SYNONYM CLIENTS_EUN FOR VIEW_GLOBAL_CLIENTS_EUN;

CREATE OR REPLACE VIEW VIEW_GLOBAL_CLIENTS_O
AS
(
  (SELECT * FROM AFAVIER.Clients_O@EuN)
);
CREATE SYNONYM CLIENTS_O FOR VIEW_GLOBAL_CLIENTS_O;

/* COMMANDES */
CREATE OR REPLACE VIEW VIEW_GLOBAL_COMMANDES_A
AS
(
  (SELECT * FROM OSTEIN.COMMANDES_A@Am)
);
CREATE SYNONYM COMMANDES_A FOR VIEW_GLOBAL_COMMANDES_A;

CREATE OR REPLACE VIEW VIEW_GLOBAL_COMMANDES_EUN
AS
(
  (SELECT * FROM AFAVIER.COMMANDES_EUN@EuN)
);
CREATE SYNONYM COMMANDES_EUN FOR VIEW_GLOBAL_COMMANDES_EUN;

CREATE OR REPLACE VIEW VIEW_GLOBAL_COMMANDES_O
AS
(
  (SELECT * FROM AFAVIER.COMMANDES_O@EuN)
);
CREATE SYNONYM COMMANDES_O FOR VIEW_GLOBAL_COMMANDES_O;

/* DETAILS COMMANDES */
CREATE OR REPLACE VIEW V_G_DETAILS_COMMANDES_A
AS
(
  (SELECT * FROM OSTEIN.DETAILS_COMMANDES_A@Am)
);
CREATE SYNONYM DETAILS_COMMANDES_A FOR V_G_DETAILS_COMMANDES_A;

CREATE OR REPLACE VIEW V_G_DETAILS_COMMANDES_EUN
AS
(
  (SELECT * FROM AFAVIER.DETAILS_COMMANDES_EUN@EuN)
);
CREATE SYNONYM DETAILS_COMMANDES_EUN FOR V_G_DETAILS_COMMANDES_EUN;

CREATE OR REPLACE VIEW V_G_DETAILS_COMMANDES_O
AS
(
  (SELECT * FROM AFAVIER.DETAILS_COMMANDES_O@EuN)
);
CREATE SYNONYM DETAILS_COMMANDES_O FOR V_G_DETAILS_COMMANDES_O;

/* STOCK */
CREATE OR REPLACE VIEW VIEW_GLOBAL_STOCK_A
AS
(
  (SELECT * FROM OSTEIN.STOCK_A@Am)
);
CREATE SYNONYM STOCK_A FOR VIEW_GLOBAL_STOCK_A;

CREATE OR REPLACE VIEW VIEW_GLOBAL_STOCK_EUN
AS
(
  (SELECT * FROM AFAVIER.STOCK_EUN@EuN)
);
CREATE SYNONYM STOCK_EUN FOR VIEW_GLOBAL_STOCK_EUN;

CREATE OR REPLACE VIEW VIEW_GLOBAL_STOCK_O
AS
(
  (SELECT * FROM AFAVIER.STOCK_O@EuN)
);
CREATE SYNONYM STOCK_O FOR VIEW_GLOBAL_STOCK_O;

/* FAGMENTED TABLE CREATION */ 
CREATE TABLE CLIENTS_EuS AS 
SELECT * FROM RYORI.CLIENTS@R R WHERE R.PAYS IN (SELECT PC.PAYS FROM AFAVIER.PAYS_CONTINENT@EuN PC WHERE PC.CONTINENT='EuS');

CREATE TABLE STOCK_EuS AS 
SELECT * FROM RYORI.STOCK@R R WHERE R.PAYS IN (SELECT PC.PAYS FROM AFAVIER.PAYS_CONTINENT@EuN PC WHERE PC.CONTINENT='EuS');

CREATE TABLE COMMANDES_EuS AS 
SELECT * FROM RYORI.COMMANDES@R R WHERE R.CODE_CLIENT IN (SELECT CEUN.CODE_CLIENT FROM CLIENTS_EuS CEUN);

CREATE TABLE DETAILS_COMMANDES_EuS AS 
SELECT * FROM RYORI.DETAILS_COMMANDES@R R WHERE R.NO_COMMANDE IN (SELECT CEUN.NO_COMMANDE FROM COMMANDES_EuS CEUN);

/* TABLE CREATION */
CREATE TABLE CATEGORIES AS
SELECT * FROM RYORI.CATEGORIES@R R;

CREATE TABLE PRODUITS AS
SELECT * FROM RYORI.PRODUITS@R R;


/* GRANT REQUESTS */
GRANT ALL ON CLIENTS_EuS TO mgagne, ostein, apayan1, afavier, nsorin;

GRANT ALL ON STOCK_EuS TO mgagne, ostein, apayan1, afavier, nsorin;

GRANT ALL ON COMMANDES_EuS TO mgagne, ostein, apayan1, afavier, nsorin;

GRANT ALL ON DETAILS_COMMANDES_EuS TO mgagne, ostein, apayan1, afavier, nsorin;

GRANT ALL ON CATEGORIES TO mgagne, ostein, apayan1, afavier, nsorin;

GRANT ALL ON PRODUITS TO mgagne, ostein, apayan1, afavier, nsorin;


/* CONSTRAINTS */
ALTER TABLE CATEGORIES ADD CONSTRAINT PK_CATEGORIES PRIMARY KEY (CODE_CATEGORIE);
ALTER TABLE CLIENTS_EuS ADD CONSTRAINT PK_CLIENTS PRIMARY KEY (CODE_CLIENT);
ALTER TABLE COMMANDES_EuS ADD CONSTRAINT PK_COMMANDES PRIMARY KEY (NO_COMMANDE);
ALTER TABLE DETAILS_COMMANDES_EuS ADD CONSTRAINT PK_DETAILS_COMMANDES PRIMARY KEY (NO_COMMANDE, REF_PRODUIT);
ALTER TABLE PRODUITS ADD CONSTRAINT PK_PRODUITS PRIMARY KEY (REF_PRODUIT);
ALTER TABLE STOCK_EuS ADD CONSTRAINT PK_STOCK PRIMARY KEY (REF_PRODUIT, PAYS);

ALTER TABLE COMMANDES_EuS ADD CONSTRAINT FK_COMMANDE_CLIENTS  
FOREIGN KEY (CODE_CLIENT) REFERENCES CLIENTS_EuS (CODE_CLIENT);

ALTER TABLE DETAILS_COMMANDES_EuS ADD CONSTRAINT FK_DETAILS_COMMANDES_COMMANDES 
FOREIGN KEY (NO_COMMANDE) REFERENCES COMMANDES_EuS (NO_COMMANDE) ON DELETE CASCADE;

ALTER TABLE DETAILS_COMMANDES_EuS ADD CONSTRAINT FK_DETAILS_COMMANDES_PRODUITS
FOREIGN KEY (REF_PRODUIT) REFERENCES PRODUITS (REF_PRODUIT) ;

ALTER TABLE PRODUITS ADD CONSTRAINT FK_PRODUITS_CATEGORIE 
FOREIGN KEY (CODE_CATEGORIE) REFERENCES CATEGORIES (CODE_CATEGORIE) ON DELETE SET NULL;

ALTER TABLE STOCK_EuS ADD CONSTRAINT FK_STOCK_PRODUIT 
FOREIGN KEY (REF_PRODUIT) REFERENCES PRODUITS (REF_PRODUIT) ;


/* FOREIGN KEY REMOTE */
/* FOREIGN KEY REMOTE INSERT */
CREATE OR REPLACE TRIGGER TR_FK_COMMANDES_EMPLOYES
BEFORE INSERT OR UPDATE ON COMMANDES_EuS
FOR EACH ROW
DECLARE
  nbEmp int;
BEGIN
  SELECT COUNT(*) INTO nbEmp FROM EMPLOYES WHERE NO_EMPLOYE=:NEW.NO_EMPLOYE;
  IF (nbEmp=0) THEN
    RAISE_APPLICATION_ERROR(-20001, 'EMPLOYE INCONNU');
  END IF;
END;

CREATE OR REPLACE TRIGGER TR_FK_COMMANDES_CLIENTS
BEFORE INSERT OR UPDATE ON COMMANDES_EuS
FOR EACH ROW
DECLARE
  nbClients int;
BEGIN
  SELECT COUNT(*) INTO nbClients FROM CLIENTS WHERE CODE_CLIENT=:NEW.CODE_CLIENT;
  IF (nbClients=0) THEN
    RAISE_APPLICATION_ERROR(-20002, 'CLIENT INCONNU');
  END IF;
END;

CREATE OR REPLACE TRIGGER TR_FK_PRODUITS_FOURNISSEURS
BEFORE INSERT OR UPDATE ON PRODUITS
FOR EACH ROW
DECLARE
  nbFour int;
BEGIN
  SELECT COUNT(*) INTO nbFour FROM FOURNISSEURS WHERE NO_FOURNISSEUR=:NEW.NO_FOURNISSEUR;
  IF (nbFour=0) THEN
    RAISE_APPLICATION_ERROR(-20003, 'FOURNISSEUR INCONNU');
  END IF;
END;

/* FOREIGN KEY REMOTE DELETE */
create or replace TRIGGER TR_FK_PRODUITS_AUTRES_DELETE
BEFORE DELETE ON PRODUITS
FOR EACH ROW
DECLARE
  nbProdDC int;
  nbProdS int;
BEGIN
  SELECT COUNT(*) INTO nbProdDC FROM DETAILS_COMMANDES WHERE REF_PRODUIT=:NEW.REF_PRODUIT;
  SELECT COUNT(*) INTO nbProdS FROM STOCK WHERE REF_PRODUIT=:NEW.REF_PRODUIT; 
  IF ((nbProdDC + nbProdS)>0) THEN
    RAISE_APPLICATION_ERROR(-20004, 'PRODUIT ENCORE UTILISE');
  END IF;
END;

/* FOREIGN KEY REMOTE UPDATE */
create or replace TRIGGER TR_FK_PRODUITS_AUTRES_UPDATE
BEFORE UPDATE ON PRODUITS
FOR EACH ROW
BEGIN
  IF (:OLD.REF_PRODUIT!=:NEW.REF_PRODUIT) THEN
    RAISE_APPLICATION_ERROR(-20005, 'IMPOSSIBLE DE MODIFIE LA REFERENCE D UN PRODUIT');
  END IF;
END;


-- View CLIENTS
CREATE OR REPLACE VIEW VIEW_GLOBAL_CLIENTS
(code_client, societe, adresse, ville, code_postal, pays, telephone, fax)
AS
(
  (SELECT code_client, societe, adresse, ville, code_postal, pays, telephone, fax
  FROM Clients_A)
  UNION ALL
  (SELECT code_client, societe, adresse, ville, code_postal, pays, telephone, fax
  FROM Clients_O)
  UNION ALL
  (SELECT code_client, societe, adresse, ville, code_postal, pays, telephone, fax
  FROM Clients_EuS)
  UNION ALL
  (SELECT code_client, societe, adresse, ville, code_postal, pays, telephone, fax
  FROM Clients_EuN)
);
-- Faire une vue associ�e pour pouvoir interroger la base normalement
CREATE OR REPLACE SYNONYM Clients FOR VIEW_GLOBAL_CLIENTS;


-- View COMMANDES
CREATE OR REPLACE VIEW VIEW_GLOBAL_COMMANDES
(no_commande, code_client, no_employe, date_commande, date_envoi, port)
AS
(
  (SELECT no_commande, code_client, no_employe, date_commande, date_envoi, port
  FROM Commandes_A)
  UNION ALL
  (SELECT no_commande, code_client, no_employe, date_commande, date_envoi, port
  FROM Commandes_O)
  UNION ALL
  (SELECT no_commande, code_client, no_employe, date_commande, date_envoi, port
  FROM Commandes_EuS)
  UNION ALL
  (SELECT no_commande, code_client, no_employe, date_commande, date_envoi, port
  FROM Commandes_EuN)
);
-- Faire une vue associ�e pour pouvoir interroger la base normalement
CREATE OR REPLACE SYNONYM Commandes FOR VIEW_GLOBAL_COMMANDES;

-- View DETAILS_COMMANDES
CREATE OR REPLACE VIEW VIEW_GLOBAL_DETAILS_COMMANDES
(no_commande, ref_produit, prix_unitaire, quantite, remise)
AS
(
  (SELECT no_commande, ref_produit, prix_unitaire, quantite, remise
  FROM Details_Commandes_A)
  UNION ALL
  (SELECT no_commande, ref_produit, prix_unitaire, quantite, remise
  FROM Details_Commandes_O)
  UNION ALL
  (SELECT no_commande, ref_produit, prix_unitaire, quantite, remise
  FROM Details_Commandes_EuS)
  UNION ALL
  (SELECT no_commande, ref_produit, prix_unitaire, quantite, remise
  FROM Details_Commandes_EuN)
);
-- Faire une vue associ�e pour pouvoir interroger la base normalement
CREATE OR REPLACE SYNONYM Details_Commandes FOR VIEW_GLOBAL_DETAILS_COMMANDES;

-- View STOCK
CREATE OR REPLACE VIEW VIEW_GLOBAL_STOCK
(ref_produit, pays, unites_stock, unites_commandees, indisponible)
AS
(
  (SELECT ref_produit, pays, unites_stock, unites_commandees, indisponible
  FROM Stock_A)
  UNION ALL
  (SELECT ref_produit, pays, unites_stock, unites_commandees, indisponible
  FROM Stock_O)
  UNION ALL
  (SELECT ref_produit, pays, unites_stock, unites_commandees, indisponible
  FROM Stock_EuS)
  UNION ALL
  (SELECT ref_produit, pays, unites_stock, unites_commandees, indisponible
  FROM Stock_EuN)
);
-- Faire une vue associ�e pour pouvoir interroger la base normalement
CREATE OR REPLACE SYNONYM Stock FOR VIEW_GLOBAL_STOCK;

-- View FOURNISSEUR
CREATE OR REPLACE VIEW VIEW_GLOBAL_FOURNISSEURS
(NO_FOURNISSEUR, SOCIETE, ADRESSE, VILLE, CODE_POSTAL, PAYS, TELEPHONE, FAX)
AS
(
  (SELECT NO_FOURNISSEUR, SOCIETE, ADRESSE, VILLE, CODE_POSTAL, PAYS, TELEPHONE, FAX
  FROM AFAVIER.FOURNISSEURS@EUN)
);
-- Faire une vue associ�e pour pouvoir interroger la base normalement
CREATE SYNONYM Fournisseurs FOR VIEW_GLOBAL_FOURNISSEURS;

-- View EMPLOYE
CREATE OR REPLACE VIEW VIEW_GLOBAL_EMPLOYE
(NO_EMPLOYE, REND_COMPTE, NOM, PRENOM, FONCTION, TITRE, DATE_NAISSANCE, DATE_EMBAUCHE, SALAIRE, COMMISSION)
AS
(
  (SELECT NO_EMPLOYE, REND_COMPTE, NOM, PRENOM, FONCTION, TITRE, DATE_NAISSANCE, DATE_EMBAUCHE, SALAIRE, COMMISSION
  FROM OSTEIN.EMPLOYES@Am)
);
-- Faire une vue associ�e pour pouvoir interroger la base normalement
CREATE SYNONYM Employes FOR VIEW_GLOBAL_EMPLOYE;

/* TESTS */
SELECT * FROM CLIENTS;
SELECT * FROM RYORI.CLIENTS@R;

SELECT * FROM CLIENTS WHERE PAYS='France' OR PAYS='Portugal' OR PAYS='Espagne';
SELECT * FROM RYORI.CLIENTS@R WHERE PAYS='France' OR PAYS='Portugal' OR PAYS='Espagne'; 

